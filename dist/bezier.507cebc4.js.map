{"mappings":"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","sources":["src/ts/main_bezier.ts","src/ts/math_helpers.ts"],"sourcesContent":["// import Complex from \"complex.js\";\nimport * as d3 from \"d3-selection\";\nimport * as math from \"mathjs\";\nimport { lineIntegralRe } from \"./lineIntegral\";\nimport { renderKaTeX } from \"./helpers\";\nimport World from \"./world\";\nimport { binomial } from \"./math_helpers\";\nimport * as THREE from \"three\";\n\nwindow.math = math;\n\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst world = new World(canvas);\n\nconst gaussIntegrationOrder = 4; // 2, 4, 8, 16, 64\n// const numSamplePoints = 16;\n\nlet uRange: number[];\nlet vRange: number[];\n\n/** UI SETUP */\n\nconst input_uMin = d3.select(\"#uMin\").node() as HTMLInputElement;\nconst input_uMax = d3.select(\"#uMax\").node() as HTMLInputElement;\nconst input_vMin = d3.select(\"#vMin\").node() as HTMLInputElement;\nconst input_vMax = d3.select(\"#vMax\").node() as HTMLInputElement;\n\nuRange = [Number(input_uMin.value), Number(input_uMax.value)];\nvRange = [Number(input_vMin.value), Number(input_vMax.value)];\n\n// From https://github.com/CindyJS/website/blob/master/src/gallery/main/Raytracer/Raytracer.html\n// //casteljau algorithm to evaluate and subdivide polynomials in Bernstein form.\n// //poly is a vector containing the coefficients, i.e. p(x) = sum(0..N, i, poly_(i+1) * b_(i,N)(x)) where b_(i,N)(x) = choose(N, i)*x^i*(1-x)^(N-1)\n// function casteljau(poly: number[], x:number) {\n//   let alpha: number, beta: number\n//   alpha = 1-x;\n//   beta = x;\n//   for(let k= 0; k<N; k++){\n//     poly[N-k] = alpha * poly[N-k] + beta * poly[N-k+1]\n//   }\n//   forall(0..N, k,\n//     repeat(N-k,\n//       poly_# = alpha*poly_# + beta*poly_(#+1);\n//     );\n//   );\n//   poly //the bernstein-coefficients of the polynomial in the interval [x,1]\n//     }\n\n// //evaluates a polynomial, represented as vector of coefficients in bernstein-form\n// eval(poly, x) := casteljau(poly, x)_1;\n\nconst points = [\n  [\n    [-0.748761164940777, -0.8402381743235232, 0.04274015516621033],\n    [-0.7475656357126989, -0.1928718772029352, 0.5877630432929579],\n    [-0.6626355872286919, 0.30943251997248417, 0.6331506603790417],\n    [-0.7411355781707372, 0.9551223478313272, -0.007481980838387352],\n  ],\n  [\n    [-0.24416820286398033, -0.9076925101714132, 0.18494348687624498],\n    [-0.20824205864537018, -0.3123537599499005, 0.3459096923096413],\n    [-0.16666666666666669, 0.16666666666666663, 0],\n    [-0.18269596582519296, 0.589082814175693, -0.002329326416544558],\n  ],\n  [\n    [0.07613058012289238, -0.9425949013945255, 0.133045261074619],\n    [-0.0001372148156425645, -0.3582199476866469, -0.3796737235283502],\n    [0.16666666666666663, 0.16666666666666663, 0],\n    [0.3156236789214345, 0.5747990465976968, -0.0064624054702717435],\n  ],\n  [\n    [0.6342803293873607, -1.0083999119546152, -0.07115695843497323],\n    [0.5438825466797169, -0.5482203218034467, 0.38547521423602565],\n    [0.8985042837479602, 0.16070086128165906, -0.010871541242017392],\n    [0.8569404440380297, 0.8009859366247764, -0.019276928430119158],\n  ],\n];\n\nfunction bicubicPatch(u: number, v: number, vector: THREE.Vector3) {\n  const N = points.length;\n  const M = points[0].length;\n  let S = 0;\n\n  for (let k = 0; k < 3; k++) {\n    S = 0;\n    for (let i = 0; i < N; i++) {\n      for (let j = 0; j < M; j++) {\n        S +=\n          points[i][j][k] *\n          binomial(N, i) *\n          Math.pow(u, i) *\n          Math.pow(1 - u, N - i) *\n          binomial(M, j) *\n          Math.pow(v, j) *\n          Math.pow(1 - v, M - j);\n      }\n    }\n    if (k === 0) vector.x = S;\n    if (k === 1) vector.y = S;\n    if (k === 2) vector.z = S;\n  }\n}\n\nfunction runVisualization() {\n  uRange = [Number(input_uMin.value), Number(input_uMax.value)];\n  vRange = [Number(input_vMin.value), Number(input_vMax.value)];\n\n  // if (expr_f === \"\" || expr_g === \"\") {\n  //   console.log(\"empty data\");\n  //   world.clearWorld();\n  //   return;\n  // }\n\n  world.createWorldFromFunction(bicubicPatch);\n}\n\nrunVisualization();\n","function binomial(n: number, k: number) {\n  // step 1: a basic LUT with a few steps of Pascal's triangle\n  const binomials = [\n    [1],\n    [1, 1],\n    [1, 2, 1],\n    [1, 3, 3, 1],\n    [1, 4, 6, 4, 1],\n    [1, 5, 10, 10, 5, 1],\n    [1, 6, 15, 20, 15, 6, 1],\n    [1, 7, 21, 35, 35, 21, 7, 1],\n    [1, 8, 28, 56, 70, 56, 28, 8, 1],\n    //  ...\n  ];\n  // step 2: a function that builds out the LUT if it needs to.\n  while (n >= binomials.length) {\n    let s = binomials.length;\n    let nextRow = [] as number[];\n    nextRow[0] = 1;\n    for (let i = 1, prev = s - 1; i < s; i++) {\n      nextRow[i] = binomials[prev][i - 1] + binomials[prev][i];\n    }\n    nextRow[s] = 1;\n    binomials.push(nextRow);\n  }\n  return binomials[n][k];\n}\n\nexport { binomial };\n"],"names":["$hOxpW","parcelRequire","$8c3bc97188e68c3b$export$5bc76864710e979","n","k","binomials","length","s","nextRow","i","prev","push","window","math","$c3Cot","$870ceae5612585f4$var$canvas","document","getElementById","$870ceae5612585f4$var$world","$3HK2m","default","$870ceae5612585f4$var$uRange","$870ceae5612585f4$var$vRange","$870ceae5612585f4$var$input_uMin","node","$870ceae5612585f4$var$input_uMax","$870ceae5612585f4$var$input_vMin","$870ceae5612585f4$var$input_vMax","Number","value","$870ceae5612585f4$var$points","$870ceae5612585f4$var$bicubicPatch","u","v","vector","N","M","S","j","Math","pow","x","y","z","createWorldFromFunction"],"version":3,"file":"bezier.507cebc4.js.map"}